parameters:
  environment: ''
  configurationMatrix: []
  forceRun: false
  skipTests: false

jobs:

- job: TemplateChangeDetection
  pool: $(AGENT_POOL)
  variables:
  - group: '${{ parameters.environment }} Environment Variables'
  displayName: Determine CD Targets to Run
  condition: not(coalesce(variables.FORCE_RUN, ${{ parameters.forceRun }}))
  steps:
  - ${{ each config in parameters.configurationMatrix }}:
    - task: Bash@3
      name: ${{ config.jobName }}
      displayName: Determine if ${{ config.jobName }} needs CD
      inputs:
        filePath: './$(PIPELINE_ROOT_DIR)/$(SCRIPTS_DIR)/set-cicd-flag.sh'
        workingDirectory: $(Build.SourcesDirectory)
      env:
        TERRAFORM_TEMPLATE_PATH: '${{ config.terraformTemplatePath }}'

- ${{ each config in parameters.configurationMatrix }}:
  - deployment: Provision_${{ config.jobName }}_${{ parameters.environment }}
    dependsOn: TemplateChangeDetection
    pool: $(AGENT_POOL)
    condition: or(coalesce(variables.FORCE_RUN, ${{ parameters.forceRun }}), eq(dependencies.TemplateChangeDetection.outputs['${{ config.jobName }}.needs_cicd'], 'true'))

    ${{ if config.deploymentTimeoutInMinutes }}:
      timeoutInMinutes: '${{ config.deploymentTimeoutInMinutes }}'

    variables:
    - group: '${{ parameters.environment }} Environment Variables'

    - ${{ if config.terraformWorkspacePrefix }}:
      - name: TF_WORKSPACE_NAME
        value: ${{ config.terraformWorkspacePrefix }}-${{ parameters.environment }}

    - ${{ if not(config.terraformWorkspacePrefix) }}:
      - name: TF_WORKSPACE_NAME
        value: ${{ parameters.environment }}

    - name: RELEASE_ARTIFACT_NAME
      value: $(BUILD_ARTIFACT_NAME)-$(TF_WORKSPACE_NAME)

    - name: ARTIFACT_ROOT
      value: '$(System.DefaultWorkingDirectory)/$(RELEASE_ARTIFACT_NAME)'

    - name: TERRAFORM_TEMPLATE_PATH
      value: ${{ config.terraformTemplatePath }}

    - name: TF_TEMPLATE_WORKING_DIR
      value: '$(System.DefaultWorkingDirectory)/$(RELEASE_ARTIFACT_NAME)/${{ config.terraformTemplatePath }}'

    environment: ${{ parameters.environment }}
    strategy:
      runOnce:
        deploy:
          steps:
          - download: none
          - task: DownloadBuildArtifacts@0
            displayName: 'Download Build Artifacts'
            inputs:
              artifactName: '$(RELEASE_ARTIFACT_NAME)'
              downloadPath: '$(System.DefaultWorkingDirectory)'
          - task: GoTool@0
            displayName: 'Verify Go Version is Installed'
            inputs:
              version: '$(GO_VERSION)'

          - task: AzureCLI@1
            displayName: 'Select Terraform Workspace'
            inputs:
              azureSubscription: '$(SERVICE_CONNECTION_NAME)'
              scriptPath: './$(RELEASE_ARTIFACT_NAME)/$(PIPELINE_ROOT_DIR)/$(SCRIPTS_DIR)/tf-create-workspace.sh'
              addSpnToEnvironment: true
              workingDirectory: '$(System.DefaultWorkingDirectory)'
            env:
              TF_VAR_remote_state_account: $(REMOTE_STATE_ACCOUNT)
              TF_VAR_remote_state_container: $(REMOTE_STATE_CONTAINER)

          - task: AzureCLI@1
            displayName: 'Apply Resource Changes to Environment'
            inputs:
              azureSubscription: '$(SERVICE_CONNECTION_NAME)'
              scriptPath: './$(RELEASE_ARTIFACT_NAME)/$(PIPELINE_ROOT_DIR)/$(SCRIPTS_DIR)/tf-apply-plan.sh'
              addSpnToEnvironment: true
              workingDirectory: '$(System.DefaultWorkingDirectory)'
            env:
              TF_VAR_remote_state_container: $(REMOTE_STATE_CONTAINER)
              TF_VAR_remote_state_account: $(REMOTE_STATE_ACCOUNT)

          - task: AzureCLI@1
            displayName: 'Integration Test Terraform Template'
            condition: not(coalesce(variables.SKIP_TESTS, ${{ parameters.skipTests }}))
            inputs:
              azureSubscription: '$(SERVICE_CONNECTION_NAME)'
              scriptPath: './$(RELEASE_ARTIFACT_NAME)/$(PIPELINE_ROOT_DIR)/$(SCRIPTS_DIR)/test-integration.sh'
              addSpnToEnvironment: true
              workingDirectory: '$(System.DefaultWorkingDirectory)'
            env:
              TF_VAR_remote_state_container: $(REMOTE_STATE_CONTAINER)
              TF_VAR_remote_state_account: $(REMOTE_STATE_ACCOUNT)

          - ${{ if containsValue(config.environmentsToTeardownAfterRelease, parameters.environment) }}:
            - task: AzureCLI@1
              condition: always()
              displayName: 'Teardown Environment'
              inputs:
                azureSubscription: '$(SERVICE_CONNECTION_NAME)'
                scriptPath: './$(RELEASE_ARTIFACT_NAME)/$(PIPELINE_ROOT_DIR)/$(SCRIPTS_DIR)/tf-destroy.sh'
                addSpnToEnvironment: true
                workingDirectory: '$(System.DefaultWorkingDirectory)'
              env:
                TF_VAR_remote_state_container: $(REMOTE_STATE_CONTAINER)
                TF_VAR_remote_state_account: $(REMOTE_STATE_ACCOUNT)
