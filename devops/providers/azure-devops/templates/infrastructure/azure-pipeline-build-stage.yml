parameters:
  environment: ''
  configurationMatrix: []
  forceRun: false
  skipTests: false

jobs:

- job: TemplateChangeDetection
  variables:
  - group: '${{ parameters.environment }} Environment Variables'
  displayName: Determine CI Targets to Run
  pool: $(AGENT_POOL)
  condition: not(coalesce(variables.FORCE_RUN, ${{ parameters.forceRun }}))

  steps:
  - ${{ each config in parameters.configurationMatrix }}:
    - task: Bash@3
      name: ${{ config.jobName }}
      displayName: Determine if ${{ config.jobName }} needs CI
      inputs:
        filePath: './$(PIPELINE_ROOT_DIR)/$(SCRIPTS_DIR)/set-cicd-flag.sh'
        workingDirectory: $(Build.SourcesDirectory)
      env:
        TERRAFORM_TEMPLATE_PATH: '${{ config.terraformTemplatePath }}'

- ${{ each config in parameters.configurationMatrix }}:
  - job: Build_${{ config.jobName }}_${{ parameters.environment }}
    dependsOn: TemplateChangeDetection
    pool: $(AGENT_POOL)
    condition: or(coalesce(variables.FORCE_RUN, ${{ parameters.forceRun }}), eq(dependencies.TemplateChangeDetection.outputs['${{ config.jobName }}.needs_cicd'], 'true'))

    variables:
    - group: '${{ parameters.environment }} Environment Variables'

    - ${{ if config.terraformWorkspacePrefix }}:
      - name: TF_WORKSPACE_NAME
        value: ${{ config.terraformWorkspacePrefix }}-${{ parameters.environment }}

    - ${{ if not(config.terraformWorkspacePrefix) }}:
      - name: TF_WORKSPACE_NAME
        value: ${{ parameters.environment }}

    - name: ARTIFACT_ROOT
      value: '$(System.DefaultWorkingDirectory)/$(BUILD_ARTIFACT_NAME)'

    - name: TERRAFORM_TEMPLATE_PATH
      value: ${{ config.terraformTemplatePath }}

    - name: TF_TEMPLATE_WORKING_DIR
      value: '$(System.DefaultWorkingDirectory)/$(BUILD_ARTIFACT_NAME)/${{ config.terraformTemplatePath }}'

    workspace:
      clean: all

    steps:
    - checkout: none
    - download: none

    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      inputs:
        artifactName: $(BUILD_ARTIFACT_NAME)
        downloadPath: '$(System.DefaultWorkingDirectory)'

    - task: GoTool@0
      displayName: 'Verify Go Version is Installed'
      inputs:
        version: '$(GO_VERSION)'

    - task: Bash@3
      name: SetupGitCredentialInjection
      displayName: Configure Git to use PAT
      condition: ne(variables.TEMPLATE_REPO_PAT, '')
      inputs:
        targetType: 'inline'
        script: '[[ -z $SecretPAT ]] && echo "No PAT provided; skipping." || git config --global url."https://cobalt:$SecretPAT@".insteadOf "https://"'
      env:
        SecretPAT: $(TEMPLATE_REPO_PAT)

    - task: AzureCLI@1
      displayName: 'Unit Test Terraform Template'
      condition: not(coalesce(variables.SKIP_TESTS, ${{ parameters.skipTests }}))
      inputs:
        azureSubscription: '$(SERVICE_CONNECTION_NAME)'
        scriptPath: './$(BUILD_ARTIFACT_NAME)/$(PIPELINE_ROOT_DIR)/$(SCRIPTS_DIR)/test-unit.sh'
        addSpnToEnvironment: true
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      env:
        TF_VAR_remote_state_container: $(REMOTE_STATE_CONTAINER)
        TF_VAR_remote_state_account: $(REMOTE_STATE_ACCOUNT)

    - task: AzureCLI@1
      displayName: 'Create Terraform Workspace'
      inputs:
        azureSubscription: '$(SERVICE_CONNECTION_NAME)'
        scriptPath: './$(BUILD_ARTIFACT_NAME)/$(PIPELINE_ROOT_DIR)/$(SCRIPTS_DIR)/tf-create-workspace.sh'
        addSpnToEnvironment: true
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      env:
        TF_VAR_remote_state_account: $(REMOTE_STATE_ACCOUNT)
        TF_VAR_remote_state_container: $(REMOTE_STATE_CONTAINER)

    - task: Bash@3
      name: TeardownGitCredentialInjection
      displayName: Reset Git configuration
      condition: and(always(), ne(variables.TEMPLATE_REPO_PAT, ''))
      inputs:
        targetType: 'inline'
        script: '[[ -z $SecretPAT ]] && echo "No PAT provided; skipping." || git config --global --unset url."https://cobalt:$SecretPAT@".insteadOf'
      env:
        SecretPAT: $(TEMPLATE_REPO_PAT)


    - task: AzureCLI@1
      displayName: 'Create Terraform Execution Plan'
      inputs:
        azureSubscription: '$(SERVICE_CONNECTION_NAME)'
        scriptPath: './$(BUILD_ARTIFACT_NAME)/$(PIPELINE_ROOT_DIR)/$(SCRIPTS_DIR)/tf-generate-plan.sh'
        addSpnToEnvironment: true
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      env:
        TF_VAR_remote_state_container: $(REMOTE_STATE_CONTAINER)
        TF_VAR_remote_state_account: $(REMOTE_STATE_ACCOUNT)

    - task: CopyFiles@2
      displayName: Copy Build Directory to Artifact Directory
      inputs:
        contents: '**'
        sourceFolder: '$(System.DefaultWorkingDirectory)/$(BUILD_ARTIFACT_NAME)'
        targetFolder: $(Build.ArtifactStagingDirectory)

    - task: PublishBuildArtifacts@1
      displayName: Publish Artifact
      inputs:
        parallel: true
        parallelCount: 8
        artifactName: '$(BUILD_ARTIFACT_NAME)-$(TF_WORKSPACE_NAME)'
        pathToPublish: $(Build.ArtifactStagingDirectory)
